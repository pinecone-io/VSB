# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Only allow one workflow to run at once - given we need to create an index
# for each python-version (3x), we want to constrain how many indexes are
# needed for this project at any one time.
concurrency:
  group: build-and-test

jobs:
  build:

    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
        environment: ['serverless', 'pod']

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.1
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Install dependencies
      run: |
        poetry install
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run flake8 . --extend-exclude .venv --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        poetry run flake8 . --extend-exclude .venv --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Set up Docker Compose
      run: |
        docker compose -f docker/pgvector/docker-compose.yml up -d
    - name: Test with pytest
      run: |
        poetry run pytest --durations=10
      env:
        ENVIRONMENT: ${{ matrix.environment == 'pod' && 'us-east4-gcp' || '' }}
        SERVERLESS_REGION: us-west-2
        SERVERLESS_CLOUD: aws
        NAME_PREFIX: test-${{ github.run_number }}
        PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'
    - name: Clean up dangling indexes
      if: always()
      run: |
        poetry run python3 .github/scripts/cleanup_pinecone_project.py
      env:
        ENVIRONMENT: ${{ matrix.environment }}
        NAME_PREFIX: test-${{ github.run_number }}
        PINECONE_API_KEY: '${{ secrets.PINECONE_API_KEY }}'
    - name: Shut down Docker Compose
      if: always()
      run: |
        docker compose -f docker/pgvector/docker-compose.yml down
